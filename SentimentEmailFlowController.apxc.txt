public with sharing class SentimentEmailFlowController {

    @InvocableMethod(label='Analyze Sentiment and Send Email' description='Analyze sentiment and send an email based on feedback.')
    public static void analyzeAndSend(List<Id> responseIds) {
        for (Id responseId : responseIds) {
            Response__c responseRecord = [SELECT Id, Feedback__c, Email__c, Emotion__c FROM Response__c WHERE Id = :responseId LIMIT 1];
            
            // Create an instance of the SentimentAnalysisUtil class
            SentimentAnalysisUtil util = new SentimentAnalysisUtil();
            
            // Extract fields from the retrieved record
            String feedbackText = util.stripHtmlTags(responseRecord.Feedback__c);
            String email = responseRecord.Email__c;
            
            // Get the emotion from the feedback text
            String emotion = util.getEmotion(feedbackText);
            System.debug('Emotion to be set: ' + emotion);

            // Update the emotion field on the feedback record
            responseRecord.Emotion__c = emotion;
            System.debug('Setting Emotion__c to: ' + responseRecord.Emotion__c);

            try {
                update responseRecord;
                System.debug('Successfully updated Emotion__c.');
            } catch (DmlException e) {
                System.debug('Error updating Emotion__c: ' + e.getMessage());
            }

            // Send an email based on the detected emotion
            util.sendEmotionEmail(email, emotion);
        }
    }
}